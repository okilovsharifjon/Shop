// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OsonCommerce.Infrastructure;

#nullable disable

namespace OsonCommerce.Infrastructure.Migrations
{
    [DbContext(typeof(OsonCommerceDbContext))]
    partial class OsonCommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CashboxEmployee", b =>
                {
                    b.Property<Guid>("CashboxId")
                        .HasColumnType("UUID");

                    b.Property<Guid>("ChashiersId")
                        .HasColumnType("UUID");

                    b.HasKey("CashboxId", "ChashiersId");

                    b.HasIndex("ChashiersId");

                    b.ToTable("cashbox_chashier", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Cashbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("balance");

                    b.Property<Guid[]>("ChashierIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("chashier_ids");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("key");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<Guid>("StoreBranchId")
                        .HasColumnType("UUID")
                        .HasColumnName("store_branch_id");

                    b.HasKey("Id");

                    b.HasIndex("StoreBranchId");

                    b.ToTable("cashbox", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.CashboxOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("CashboxId")
                        .HasColumnType("UUID");

                    b.Property<Guid?>("CashboxId1")
                        .HasColumnType("UUID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("UUID");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.HasKey("Id");

                    b.HasIndex("CashboxId");

                    b.HasIndex("CashboxId1");

                    b.HasIndex("EmployeeId");

                    b.ToTable("cashbox_operation", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("first_name");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("phone_number");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("position");

                    b.Property<Guid?>("StoreBranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StoreBranchId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoreBranchId");

                    b.HasIndex("StoreBranchId1");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Manufacture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("country_of_origin");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LogoName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("logo_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("website_url");

                    b.HasKey("Id");

                    b.ToTable("manufacture", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.PriceType", b =>
                {
                    b.Property<Guid>("PriceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("price_type_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("PriceTypeID");

                    b.ToTable("price_type", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("UUID")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("expiry_date");

                    b.Property<string>("ImageName")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("image_name");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("manufacture_date");

                    b.Property<Guid?>("ManufactureId")
                        .HasColumnType("UUID")
                        .HasColumnName("manufacture_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProductAttributeId")
                        .HasColumnType("UUID")
                        .HasColumnName("product_attribute_id");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("sku");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("unit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufactureId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.ProductAttribute", b =>
                {
                    b.Property<Guid>("ProductAttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("color");

                    b.Property<string>("Memory")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("memory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("Ram")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("ram");

                    b.Property<Guid?>("product_id")
                        .HasColumnType("UUID");

                    b.HasKey("ProductAttributeID");

                    b.HasIndex("product_id");

                    b.ToTable("product_attribute", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.ProductInStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("is_available");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("last_updated");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("UUID")
                        .HasColumnName("product_id");

                    b.Property<Guid>("ProductPriceId")
                        .HasColumnType("UUID")
                        .HasColumnName("product_price_id");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("UUID")
                        .HasColumnName("provider_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<Guid>("StockId")
                        .HasColumnType("UUID")
                        .HasColumnName("stock_id");

                    b.Property<Guid>("product_id")
                        .HasColumnType("UUID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPriceId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StockId");

                    b.HasIndex("product_id");

                    b.ToTable("product_in_stock", null, t =>
                        {
                            t.Property("product_id")
                                .HasColumnName("product_id1");
                        });
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.ProductPrice", b =>
                {
                    b.Property<Guid>("ProductPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("price");

                    b.Property<Guid>("PriceTypeID")
                        .HasColumnType("uuid")
                        .HasColumnName("price_type_id");

                    b.Property<Guid?>("PriceTypeID1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("UUID")
                        .HasColumnName("product_id");

                    b.Property<Guid>("StockID")
                        .HasColumnType("UUID")
                        .HasColumnName("warehouse_id");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.HasKey("ProductPriceID");

                    b.HasIndex("PriceTypeID");

                    b.HasIndex("PriceTypeID1");

                    b.HasIndex("ProductID");

                    b.HasIndex("StockID");

                    b.ToTable("product_price", null, t =>
                        {
                            t.Property("product_id")
                                .HasColumnName("product_id1");
                        });
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("address");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("contact_info");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("provider", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("capacity");

                    b.Property<int>("CurrentLoad")
                        .HasColumnType("INTEGER")
                        .HasColumnName("current_load");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("is_available");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("phone_number");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("stock_code");

                    b.HasKey("Id");

                    b.ToTable("stock", (string)null);
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.StoreBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid[]>("ManagerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("manager_ids");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OperatingHours")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("store_branch", (string)null);
                });

            modelBuilder.Entity("CashboxEmployee", b =>
                {
                    b.HasOne("OsonCommerce.Domain.Entities.Cashbox", null)
                        .WithMany()
                        .HasForeignKey("CashboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("ChashiersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Cashbox", b =>
                {
                    b.HasOne("OsonCommerce.Domain.Entities.StoreBranch", "StoreBranch")
                        .WithMany()
                        .HasForeignKey("StoreBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreBranch");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.CashboxOperation", b =>
                {
                    b.HasOne("OsonCommerce.Domain.Entities.Cashbox", "Cashbox")
                        .WithMany()
                        .HasForeignKey("CashboxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.Cashbox", null)
                        .WithMany("CashboxOperations")
                        .HasForeignKey("CashboxId1");

                    b.HasOne("OsonCommerce.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cashbox");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Employee", b =>
                {
                    b.HasOne("OsonCommerce.Domain.Entities.StoreBranch", "StoreBranch")
                        .WithMany()
                        .HasForeignKey("StoreBranchId");

                    b.HasOne("OsonCommerce.Domain.Entities.StoreBranch", null)
                        .WithMany("Managers")
                        .HasForeignKey("StoreBranchId1");

                    b.Navigation("StoreBranch");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Product", b =>
                {
                    b.HasOne("OsonCommerce.Domain.Entities.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.Manufacture", "Manufacture")
                        .WithMany()
                        .HasForeignKey("ManufactureId");

                    b.HasOne("OsonCommerce.Domain.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId");

                    b.Navigation("Manufacture");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.ProductAttribute", b =>
                {
                    b.HasOne("OsonCommerce.Domain.Entities.Product", null)
                        .WithMany("ProductAttributes")
                        .HasForeignKey("product_id");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.ProductInStock", b =>
                {
                    b.HasOne("OsonCommerce.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.ProductPrice", "ProductPrice")
                        .WithMany()
                        .HasForeignKey("ProductPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.Product", null)
                        .WithMany("ProductStocks")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductPrice");

                    b.Navigation("Provider");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.ProductPrice", b =>
                {
                    b.HasOne("OsonCommerce.Domain.Entities.PriceType", "PriceType")
                        .WithMany()
                        .HasForeignKey("PriceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.PriceType", null)
                        .WithMany("ProductPrices")
                        .HasForeignKey("PriceTypeID1");

                    b.HasOne("OsonCommerce.Domain.Entities.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OsonCommerce.Domain.Entities.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceType");

                    b.Navigation("Product");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Cashbox", b =>
                {
                    b.Navigation("CashboxOperations");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.PriceType", b =>
                {
                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductStocks");
                });

            modelBuilder.Entity("OsonCommerce.Domain.Entities.StoreBranch", b =>
                {
                    b.Navigation("Managers");
                });
#pragma warning restore 612, 618
        }
    }
}
